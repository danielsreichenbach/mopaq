use std::env;
use std::path::PathBuf;

fn main() {
    let crate_dir = env::var("CARGO_MANIFEST_DIR").unwrap();
    let output_dir = PathBuf::from(&crate_dir).join("include");

    // Create include directory if it doesn't exist
    std::fs::create_dir_all(&output_dir).unwrap();

    // Configure cbindgen
    let config = cbindgen::Config {
        language: cbindgen::Language::C,
        autogen_warning: Some(
            "/* Warning: This file is auto-generated by cbindgen. Do not modify manually. */"
                .to_string(),
        ),
        include_version: true,
        namespace: None,
        namespaces: None,
        braces: cbindgen::Braces::SameLine,
        line_length: 100,
        tab_width: 4,
        documentation_style: cbindgen::DocumentationStyle::C99,
        style: cbindgen::Style::Both,
        cpp_compat: true,
        header: Some(
            r#"#ifndef STORMLIB_H
#define STORMLIB_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>"#
                .to_string(),
        ),
        trailer: Some(
            r#"
#ifdef __cplusplus
}
#endif

#endif /* STORMLIB_H */"#
                .to_string(),
        ),
        ..Default::default()
    };

    // Generate bindings
    cbindgen::Builder::new()
        .with_crate(crate_dir)
        .with_config(config)
        .with_parse_deps(true)
        .with_parse_include(&["mopaq"])
        .generate()
        .expect("Unable to generate bindings")
        .write_to_file(output_dir.join("StormLib.h"));

    // Tell cargo to re-run if src files change
    println!("cargo:rerun-if-changed=src/");
}
