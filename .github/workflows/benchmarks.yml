name: Benchmarks

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  deployments: write

jobs:
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: 'benchmarks'

      # Run benchmarks
      - name: Run benchmarks
        run: cargo bench --package mopaq -- --output-format bencher | tee output.txt

      # Store benchmark result
      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: Rust Benchmarks
          tool: 'cargo'
          output-file-path: output.txt
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          # Only push on main branch
          comment-on-alert: true
          alert-threshold: '150%'
          comment-always: true
          save-data-file: ${{ github.ref == 'refs/heads/main' }}
          benchmark-data-dir-path: 'benchmarks'

      # Upload benchmark results as artifact
      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: output.txt

  criterion-benchmarks:
    name: Criterion Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: 'criterion'

      # Install critcmp for comparing results
      - name: Install critcmp
        run: cargo install critcmp

      # Checkout base branch
      - name: Checkout base branch
        run: |
          git fetch origin ${{ github.base_ref }}
          git checkout origin/${{ github.base_ref }}

      # Run benchmarks on base branch
      - name: Run base benchmarks
        run: |
          cargo bench --package mopaq -- --save-baseline base

      # Checkout PR branch
      - name: Checkout PR branch
        run: git checkout ${{ github.sha }}

      # Run benchmarks on PR branch
      - name: Run PR benchmarks
        run: |
          cargo bench --package mopaq -- --save-baseline pr

      # Compare results
      - name: Compare benchmarks
        run: |
          critcmp base pr > comparison.txt
          cat comparison.txt

      # Comment on PR
      - name: Comment PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const comparison = fs.readFileSync('comparison.txt', 'utf8');

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('## Benchmark Results')
            );

            const body = `## Benchmark Results\n\n\`\`\`\n${comparison}\n\`\`\``;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body
              });
            }
